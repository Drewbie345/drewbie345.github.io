<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Fat Cat Studio]]></title>
  <link href="http://Drewbie345.github.io/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://Drewbie345.github.io/"/>
  <updated>2014-03-23T12:43:37-05:00</updated>
  <id>http://Drewbie345.github.io/</id>
  <author>
    <name><![CDATA[Drew Robinson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Day 1: The Adventure Begins!]]></title>
    <link href="http://Drewbie345.github.io/blog/2014/02/04/day-1/"/>
    <updated>2014-02-04T19:01:41-06:00</updated>
    <id>http://Drewbie345.github.io/blog/2014/02/04/day-1</id>
    <content type="html"><![CDATA[<h2>Each vs. Map</h2>

<p>Well, Day 1 is officially winding down and I already feel like I&rsquo;m on more solid ground with the basics of Ruby than I was when I was working alone in Tulsa.</p>

<p>So, with that in mind, I wanted to share a few bits of knowledge that I gathered today.</p>

<p>One of the big <em>aha</em> moments for me today was the difference in end results that you get when using <strong>Array#each</strong> versus <strong>Array#map</strong>.</p>

<p>Let&rsquo;s take a look at a bit of code&hellip;In this particular example, I&rsquo;ve created an array containing the names of my beloved cats.</p>

<p><code>array_of_cats = ["amigo", "sly", "sway", "aj", "lil bit", "opals"]</code></p>

<p>Okay, my goal is to <em>iterate</em> through each element of my array and capitalize the first letter&hellip; (FYI: <em>iterate</em> is the fancy way of saying loop) So, what to use? Well that all depends on what you want the end result to look like.</p>

<p><code>array_of_cats.each { |cat| puts "#{cat.capitalize}" }</code></p>

<p>The above code will print a list of the cats with the first letter capitalized:</p>

<pre><code>Amigo
Sly
Sway
Aj
Lil bit
Opals
</code></pre>

<p>But what happens to the actual <code>array_of_cats</code>?</p>

<p>Well, not much really. When you run <code>array_of_cats</code> again, the output hasn&rsquo;t changed.</p>

<pre><code>["amigo", "sly", "sway", "aj", "lil bit", "opals"]
</code></pre>

<p>Okay, so now what? What does that mean? It printed out the words capitalized but it&rsquo;s like the code didn&rsquo;t stick to the actual array or something strange (at least that&rsquo;s what I thought at first). Well, it turns out that <code>.each</code> executes the block of code but then returns the <em>original</em> array.</p>

<p>So we need something else. Take a look at the below code.</p>

<p><code>array_of_cats.map { |cat| cat.capitalize }</code></p>

<pre><code>["Amigo", "Sly", "Sway", "Aj", "Lil bit", "Opals"]
</code></pre>

<p>Do you see the difference? The <code>.map</code> method executes the block of code and literally changes the original array. Map is used to iterate <em>but</em> also to map the elements to something else. Pretty cool, huh?</p>

<p>Is that the only solution? As is generally the case with Ruby, the answer is no. Take a look at the code below.</p>

<p><code>array_of_cats.each { |cat| cat.capitalize! }</code></p>

<pre><code>["Amigo", "Sly", "Sway", "Aj", "Lil bit", "Opals"]
</code></pre>

<p>Hey! What happened there? In this case, <code>.each</code> actually did change the original array&hellip;What did we do different? Suprisingly, it&rsquo;s the exclamation point that makes all the difference. Check it out&hellip;</p>

<p><code>cat = "meow"</code> <br />
<code>capitalized_cat = cat.capitalize</code> <br/>
<code>puts cat   #prints unchanged cat or "meow"</code> <br />
<code>puts capitalized_cat   #prints newly created capitalized_cat or "Meow"</code> <br /></p>

<p><code>kitty = "meh"</code> <br />
<code>capitalized_kitty = kitty.capitalize!</code> <br />
<code>puts kitty     #prints "Meh"</code> <br />
<code>puts capitalized_kitty     #prints "Meh"</code> <br /></p>

<p>Interesting, right? The <code>capitalized_cat</code> is actually a copy of the string in the original <code>cat</code>. The original string doesn&rsquo;t change. However, when you use the exclamation point, it changes the original <code>kitty</code> as well as creates the <code>capitalized_kitty</code>.</p>

<p>Too cool. The key is knowing your end goal and then finding the method that will get you there. I originally thought that <code>.each</code> and <code>.map</code> could be used interchangeably and while sometimes they can be&hellip;they can actually have two different end results.</p>

<p>Okay, that&rsquo;s all I got for today. More soon!</p>

<p><img src="/images/kitty.jpg" alt="alt text" /></p>
]]></content>
  </entry>
  
</feed>
